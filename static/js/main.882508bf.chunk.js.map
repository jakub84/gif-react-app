{"version":3,"sources":["assets/images/logo.svg","assets/images/placeholder.jpg","components/Wrappers/GridWrapper.js","components/Loader/index.js","components/SearchBar/index.js","components/Gifs/Details.js","components/Gifs/SingleGif.js","components/Gifs/index.js","components/Notifications/Notification.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GridWrapper","styled","div","props","flexWrap","marginBottom","marginTop","rotate","keyframes","LoaderWrapper","Cicle","span","Loader","SearchInput","input","dark","animateLogo","LogoContainer","LogoImg","img","SubmitButton","SearchWrapper","SearchBar","onInputChange","loading","handleSubmit","fetchedData","inputValue","length","src","logo","alt","onSubmit","placeholder","onChange","event","target","value","type","disabled","DetailsBg","CloseBtn","MainWrapper","DetailsField","ImageContainer","Image","Description","p","Details","singleGif","details","setDetails","title","url","tinyUrl","bitly_url","copyUrl","selectedInput","defaultUrl","element","select","document","execCommand","style","backgroundColor","setTimeout","onClick","toUpperCase","images","downsized_large","defaultValue","InnerWrapper","ImagePlaceholder","bg","GifWrapper","bgImage","GifTitle","h3","SingleGif","useState","slice","GifsWrapper","GifsList","allGifs","map","key","id","Wrapper","Notification","text","App","data","setData","setInputValue","setLoading","column","nowrap","searchValue","preventDefault","axios","get","then","response","Gifs","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.882508bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.4e0487c2.svg\";","module.exports = __webpack_public_path__ + \"static/media/placeholder.09b77349.jpg\";","import styled from 'styled-components';\n\nconst GridWrapper = styled.div`\n  width: 100%;\n  /* max-width: 1238px; */\n  /* padding: 0 34px; */\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: ${props => (props.flexWrap ? 'wrap' : 'nowrap')};\n  margin-bottom: ${props => props.marginBottom};\n  margin-top: ${props => props.marginTop};\n  z-index: 10;\n  position: relative;\n`;\nexport default GridWrapper;\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n\n\n`;\n\nconst LoaderWrapper = styled.div`\n  margin: 50px 0;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  color: #fff;\n`;\n\nconst Cicle = styled.span`\n  border: 3px dotted gray;\n  color: gray;\n  width: 100px;\n  height: 100px;\n  border-radius: 50%;\n  margin: 10px;\n  animation: ${rotate} 4s linear infinite;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Loader = () => (\n  <LoaderWrapper>\n    <Cicle>\n      Loading\n    </Cicle>\n\n  </LoaderWrapper>\n);\n\nexport default Loader;\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport Loader from '../Loader';\nimport logo from '../../assets/images/logo.svg';\n\nconst SearchInput = styled.input`\n  padding: 10px 20px;\n  border-top-left-radius:15px;\n  border-bottom-left-radius: 15px;\n  border: 1px solid lightgray;\n  border: ${props => (props.dark ? '2px solid #fff' : '2px solid lightgray')};\n  border-right: none;\n  background-color: transparent;\n  &:focus {\n    color: ${props => (props.dark ? 'white' : '#000')};\n    padding: 10px 30px;\n    background-color: #fff;\n  }\n  @media (max-width: 500px) {\n    padding:10px\n  }\n`;\n\n\nconst animateLogo = keyframes`\n  0% {\n    transform: rotate(0deg);\n  }\n\n  29% {\n    transform: rotate(0deg) scale(1,1);\n  }\n\n  30% {\n    transform: rotate(30deg) scale(1,1);\n  }\n\n  31% {\n    transform: rotate(-10deg) scale(1,1);\n  }\n\n  32% {\n    transform: rotate(0deg) scale(1,1);\n  }\n  59% {\n    transform: rotate(0deg) scale(1,1);\n  }\n\n  60% {\n    transform: scale(1, 1.1);\n  }\n  61% {\n    transform: scale(1, 0.9);\n  }\n  62% {\n    transform: scale(1,1);\n  }\n\n  100% {\n    transform: rotate(0deg);\n  }\n`;\n\nconst LogoContainer = styled.div`\n  margin-bottom:30px;\n  width:300px;\n  animation: ${animateLogo} 10s linear infinite;\n`;\n\nconst LogoImg = styled.img`\nwidth:100%;\nmax-width: ${props => (props.dark ? '100%' : '200px')};\n`;\n\nconst SubmitButton = styled.input`\n  padding: 10px 20px;\n  border-top-right-radius:15px;\n  border-bottom-right-radius: 15px;\n  border: 2px solid #FFAF43;\n  border-left: none;\n  background-color: #FFAF43;\n  :hover {\n    background-color: #FF5925;\n    border: 2px solid #FF5925;\n    border-left: none;\n    color: #fff;\n  }\n  :disabled {\n    background-color: lightgrey;\n    border: 2px solid lightgrey;\n    color:grey;\n  }\n`;\n\nconst SearchWrapper = styled.div`\n  background-color: ${props => (props.dark ? '#000' : '#fff')};\n  height: ${props => (props.dark ? '100vh' : '300px')};\n  width: 100%;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst SearchBar = ({\n  onInputChange, loading, handleSubmit, fetchedData, inputValue,\n}) => (\n  <SearchWrapper dark={fetchedData.length === 0 && !inputValue}>\n\n    <LogoContainer>\n      <LogoImg dark={fetchedData.length === 0} src={logo} alt=\"logo\" />\n    </LogoContainer>\n    <form onSubmit={handleSubmit}>\n      <SearchInput\n        placeholder=\"search gifs...\"\n        onChange={(event) => {\n          onInputChange(event.target.value);\n        }}\n      />\n      <SubmitButton type=\"submit\" value=\"search\" disabled={inputValue.length === 0} />\n      {loading && <Loader />}\n    </form>\n  </SearchWrapper>\n);\n\nexport default SearchBar;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst DetailsBg = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(0, 0, 0, 0.9);\n  z-index: 999;\n`;\n\nconst CloseBtn = styled.input`\n  position: absolute;\n  top: 0;\n  right: 0;\n  padding: 10px 20px;\n  border: none;\n  outline: none;\n  border-bottom-left-radius: 10px;\n  background-color: orange;\n  font-size: 12px;\n`;\n\nconst MainWrapper = styled.div`\n  width: 90%;\n  max-width: 800px;\n  padding: 30px;\n  max-height: 600px;\n  background-color: #fff;\n  border-radius: 5px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n\n  @media (max-width: 500px) {\n    padding: 60px 10px 10px 10px\n  }\n`;\n\nconst DetailsField = styled.input`\n  width: 80%;\n  border: 1px solid lightgrey;\n  padding: 10px;\n  border-radius: 10px;\n  margin-bottom: 10px;\n  text-align: center;\n  font-size: 13px;\n  cursor: pointer;\n`;\n\nconst ImageContainer = styled.div`\n  margin-bottom: 30px;\n  width: 100%;\n  margin-top: 20px;\n  text-align: center;\n`;\n\nconst Image = styled.img`\n  width: auto;\n  height: 100%;\n  max-height: 300px;\n  @media (max-width: 600px) {\n    width: 100%;\n    height: auto;\n  }\n`;\n\nconst Description = styled.p`\n  display: inline-block;\n  width: 80%;\n  font-size: 14px;\n  color: black;\n  margin: 15px 0 5px 0;\n  font-weight: 800;\n  padding-left: 5px;\n  text-align: center;\n`;\n\nconst Details = ({ singleGif, details, setDetails }) => {\n  const { title, url, bitly_url: tinyUrl } = singleGif;\n  const copyUrl = (selectedInput, defaultUrl) => {\n    const element = selectedInput;\n    element.select();\n    document.execCommand('copy');\n    element.value = 'copied!!';\n    element.style.backgroundColor = 'lightgreen';\n\n    setTimeout(() => {\n      element.value = defaultUrl;\n      element.style.backgroundColor = '#fff';\n    }, 2000);\n  };\n\n  return (\n    <>\n      {details && (\n        <DetailsBg>\n          <MainWrapper onClick={null}>\n            <CloseBtn\n              type=\"button\"\n              value=\"Close\"\n              onClick={() => setDetails(!details)}\n            />\n            <Description>{title.toUpperCase()}</Description>\n            <ImageContainer>\n              <Image src={singleGif.images.downsized_large.url} alt={title} />\n            </ImageContainer>\n            <Description> Url </Description>\n            <DetailsField\n              onChange={null}\n              type=\"text\"\n              defaultValue={url}\n              onClick={event => copyUrl(event.target, url)}\n            />\n            <Description> Tiny url </Description>\n            <DetailsField\n              onChange={null}\n              type=\"text\"\n              defaultValue={tinyUrl}\n              onClick={event => copyUrl(event.target, tinyUrl)}\n            />\n          </MainWrapper>\n        </DetailsBg>\n      )}\n    </>\n  );\n};\n\nexport default Details;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Details from './Details';\nimport placeholder from '../../assets/images/placeholder.jpg';\n\nconst InnerWrapper = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: -300px;\n  background-color: rgba(204, 153, 51, 0.9);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #fff;\n  padding: 10px;\n`;\n\nconst ImagePlaceholder = styled.div`\n  width: calc(100% / 4);\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: lightgray;\n  background-image: ${props => `url(${props.bg})`};\n  background-size: cover;\n  background-position: center;\n  overflow: hidden;\n  cursor: pointer;\n  position: relative;\n  @media (max-width: 1250px) {\n    width: calc(100% / 3);\n  }\n  @media (max-width: 800px) {\n    width: 50%;\n  }\n  @media (max-width: 500px) {\n    width: 100%;\n  }\n`;\n\nconst GifWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  height: 300px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-image: ${props => `url(${props.bgImage})`};\n  background-size: cover;\n  background-position: center;\n  overflow: hidden;\n  cursor: pointer;\n  position: relative;\n  &:hover ${InnerWrapper} {\n    top: 0;\n  }\n`;\n\nconst GifTitle = styled.h3`\n  border: 2px solid rgba(255, 255, 255, 0.4);\n  display: inline-block;\n  border-radius: 20px;\n  padding: 10px 20px;\n  font-size: 14px;\n  text-align: center;\n`;\n\nconst SingleGif = ({ singleGif }) => {\n  const { title } = singleGif;\n  const [details, setDetails] = useState(false);\n  return (\n    <>\n      <Details\n        singleGif={singleGif}\n        details={details}\n        setDetails={setDetails}\n      />\n      <ImagePlaceholder bg={placeholder}>\n        <GifWrapper\n          bgImage={singleGif.images.downsized_large.url}\n          onClick={() => setDetails(!details)}\n        >\n          <InnerWrapper>\n            {title ? (\n              <GifTitle>{title[0].toUpperCase() + title.slice(1)}</GifTitle>\n            ) : (\n              'No title'\n            )}\n          </InnerWrapper>\n        </GifWrapper>\n      </ImagePlaceholder>\n    </>\n  );\n};\n\nexport default SingleGif;\n","import React from 'react';\nimport styled from 'styled-components';\nimport SingleGif from './SingleGif';\n\nconst GifsWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst GifsList = ({ allGifs }) => (\n  <GifsWrapper>\n    {allGifs.map(singleGif => (\n      <SingleGif key={singleGif.id} singleGif={singleGif} />\n    ))}\n  </GifsWrapper>\n);\n\nexport default GifsList;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n  width: 90%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  border: 1px solid lightgray;\n  padding:20px;\n  margin-top: 30px;\n`;\n\nconst Notification = ({ text }) => (\n  <Wrapper>\n    {text}\n  </Wrapper>\n);\n\nexport default Notification;\n","import React, { useState } from 'react';\nimport axios from 'axios';\nimport GridWrapper from './components/Wrappers/GridWrapper';\nimport SearchBar from './components/SearchBar';\nimport GifsList from './components/Gifs/index';\nimport Notification from './components/Notifications/Notification';\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const onInputChange = (searchValue) => {\n    setInputValue(searchValue);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (inputValue.length === 0) return;\n    setLoading(true);\n    axios\n      .get(\n        `https://api.giphy.com/v1/gifs/search?api_key=vPFgAGhW54kZX5TzaZQxDUM0Wd8EbmlH&q=${inputValue}&offset=0&rating=G&lang=en`,\n      )\n      .then((response) => {\n        setLoading(false);\n        setData(response.data.data);\n      });\n  };\n  return (\n    <GridWrapper dark={data.length === 0} column nowrap>\n      <SearchBar\n        inputValue={inputValue}\n        onInputChange={onInputChange}\n        fetchedData={data}\n        loading={loading}\n        handleSubmit={handleSubmit}\n      />\n\n      {!loading && <GifsList allGifs={data} />}\n      {!loading && data.length === 0 && inputValue.length !== 0 && <Notification text=\"There is no data\" />}\n    </GridWrapper>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}